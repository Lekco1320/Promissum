<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <Style TargetType="{x:Type Button}">

        <Setter Property="Background"
                Value="{DynamicResource GWhiteToCLightGrayBrush}" />

        <Setter Property="BorderBrush"
                Value="{DynamicResource CGrayBrush}" />

        <Setter Property="MinHeight"
                Value="18.8" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <Border Width="{TemplateBinding Width}"
                            Height="{TemplateBinding Height}"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="3">

                        <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Content="{TemplateBinding Content}"
                                          Focusable="False"
                                          RecognizesAccessKey="True" />

                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>

            <Trigger Property="IsMouseOver"
                     Value="True">

                <Setter Property="BorderBrush"
                        Value="{DynamicResource CDeepBlueBrush}" />

                <Setter Property="Foreground"
                        Value="{DynamicResource CDeepBlueBrush}" />

            </Trigger>

            <Trigger Property="IsPressed"
                     Value="True">

                <Setter Property="Background"
                        Value="{DynamicResource GCBlueToCDeepBlueBrush}" />

                <Setter Property="BorderBrush"
                        Value="{DynamicResource CGrayBrush}" />

                <Setter Property="Foreground"
                        Value="{DynamicResource CWhiteBrush}" />

            </Trigger>

            <Trigger Property="IsEnabled"
                     Value="False">

                <Setter Property="Foreground"
                        Value="{DynamicResource CGrayBrush}" />

            </Trigger>

        </Style.Triggers>

    </Style>

    <Style x:Key="RedTextButton"
           BasedOn="{StaticResource {x:Type Button}}"
           TargetType="{x:Type Button}">

        <Style.Triggers>

            <Trigger Property="IsMouseOver"
                     Value="True">

                <Setter Property="BorderBrush"
                        Value="{DynamicResource CRedBrush}" />

                <Setter Property="Foreground"
                        Value="{DynamicResource CLightRedBrush}" />

            </Trigger>

            <Trigger Property="IsPressed"
                     Value="True">

                <Setter Property="Background"
                        Value="{DynamicResource GCLightRedToCRedBrush}" />

                <Setter Property="BorderBrush"
                        Value="{DynamicResource CGrayBrush}" />

                <Setter Property="Foreground"
                        Value="{DynamicResource CWhiteBrush}" />

            </Trigger>

            <Trigger Property="IsEnabled"
                     Value="False">

                <Setter Property="Foreground"
                        Value="{DynamicResource CGrayBrush}" />

            </Trigger>

        </Style.Triggers>

    </Style>

    <Style x:Key="CheckMarkButton"
           TargetType="{x:Type Button}">

        <Setter Property="HorizontalAlignment"
                Value="Center" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">

                    <Path x:Name="checkmark"
                          Data="M 0 4 L 4 8 L 9 0"
                          Stroke="{DynamicResource CBlueBrush}"
                          StrokeThickness="1" />

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver"
                                 Value="True">

                            <Setter TargetName="checkmark"
                                    Property="Stroke"
                                    Value="{DynamicResource CDarkGrayBrush}" />

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="VerticalAlignment"
                Value="Center" />

    </Style>

    <Style x:Key="TreeViewToggleButtonStyle"
           TargetType="{x:Type ToggleButton}">

        <Setter Property="Background"
                Value="Transparent" />

        <Setter Property="Foreground"
                Value="{DynamicResource CBlackBrush}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">

                    <Grid>

                        <Path x:Name="ExpandPath"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              Data="M 0,0 L 6,4 L 0,7 Z"
                              Fill="{TemplateBinding Foreground}"
                              StrokeThickness="1" />

                        <Path x:Name="CollapsePath"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              Data="M 6.5,0 L 0,6.5 L 6.5,6.5 Z"
                              Fill="{TemplateBinding Foreground}"
                              StrokeThickness="1" />

                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="IsChecked"
                                 Value="True">

                            <Setter TargetName="ExpandPath"
                                    Property="Visibility"
                                    Value="Collapsed" />

                            <Setter TargetName="CollapsePath"
                                    Property="Visibility"
                                    Value="Visible" />

                        </Trigger>

                        <Trigger Property="IsChecked"
                                 Value="False">

                            <Setter TargetName="ExpandPath"
                                    Property="Visibility"
                                    Value="Visible" />

                            <Setter TargetName="CollapsePath"
                                    Property="Visibility"
                                    Value="Collapsed" />

                        </Trigger>

                        <Trigger Property="IsMouseOver"
                                 Value="True">

                            <Setter Property="Foreground"
                                    Value="{DynamicResource CDarkGrayBrush}" />

                        </Trigger>

                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <Style x:Key="HyperlinkButtonStyle"
           BasedOn="{StaticResource {x:Type Button}}"
           TargetType="{x:Type Button}">

        <Setter Property="HorizontalAlignment"
                Value="Center" />

        <Setter Property="Padding"
                Value="5,0" />

        <Setter Property="VerticalAlignment"
                Value="Center" />

    </Style>

    <Style TargetType="{x:Type ToggleButton}">

        <Setter Property="Background"
                Value="{DynamicResource GWhiteToCLightGrayBrush}" />

        <Setter Property="BorderBrush"
                Value="{DynamicResource CGrayBrush}" />

        <Setter Property="MinHeight"
                Value="18.8" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">

                    <Border Width="{TemplateBinding Width}"
                            Height="{TemplateBinding Height}"
                            Padding="{TemplateBinding Padding}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="3">

                        <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Content="{TemplateBinding Content}"
                                          Focusable="False"
                                          RecognizesAccessKey="True" />

                    </Border>

                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>

            <Trigger Property="IsMouseOver"
                     Value="True">

                <Setter Property="BorderBrush"
                        Value="{DynamicResource CDeepBlueBrush}" />

                <Setter Property="Foreground"
                        Value="{DynamicResource CDeepBlueBrush}" />

            </Trigger>

            <Trigger Property="IsPressed"
                     Value="True">

                <Setter Property="Background"
                        Value="{DynamicResource GCBlueToCDeepBlueBrush}" />

                <Setter Property="BorderBrush"
                        Value="{DynamicResource CGrayBrush}" />

                <Setter Property="Foreground"
                        Value="{DynamicResource CWhiteBrush}" />

            </Trigger>

            <Trigger Property="IsEnabled"
                     Value="False">

                <Setter Property="Foreground"
                        Value="{DynamicResource CGrayBrush}" />

            </Trigger>

        </Style.Triggers>

    </Style>

</ResourceDictionary>